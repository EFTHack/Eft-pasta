using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Comfort.Common;
using EFT;
using EFT.Interactive;
using EFT.InventoryLogic;
using EFT.UI;
using UnityEngine;

namespace Discord
{
	// Token: 0x0200001A RID: 26
	public class Misc : MonoBehaviour
	{
		// Token: 0x17000021 RID: 33
		// (get) Token: 0x060000CB RID: 203 RVA: 0x0000B456 File Offset: 0x00009656
		// (set) Token: 0x060000CC RID: 204 RVA: 0x0000B45E File Offset: 0x0000965E
		public LootItemRarity LootItemRarity { get; private set; }

		// Token: 0x060000CD RID: 205 RVA: 0x0000B468 File Offset: 0x00009668
		private void Update()
		{
			try
			{
				bool speedhack = Config.Misc.speedhack;
				if (speedhack)
				{
					bool key = Input.GetKey(119);
					if (key)
					{
						Misc.LocalPlayer.Transform.position += Misc.LocalPlayer.Transform.forward / 5f * Misc.speedvalue;
					}
					bool key2 = Input.GetKey(115);
					if (key2)
					{
						Misc.LocalPlayer.Transform.position -= Misc.LocalPlayer.Transform.forward / 5f * Misc.speedvalue;
					}
					bool key3 = Input.GetKey(97);
					if (key3)
					{
						Misc.LocalPlayer.Transform.position -= Misc.LocalPlayer.Transform.right / 5f * Misc.speedvalue;
					}
					bool key4 = Input.GetKey(100);
					if (key4)
					{
						Misc.LocalPlayer.Transform.position += Misc.LocalPlayer.Transform.right / 5f * Misc.speedvalue;
					}
				}
				bool keyDown = Input.GetKeyDown(287);
				if (keyDown)
				{
					this.Addfriendxddd();
				}
				bool flag = Time.time >= this._nextPlayerCacheTime;
				if (flag)
				{
					Misc.GameWorld = Singleton<GameWorld>.Instance;
					Misc.MainCamera = Camera.main;
					bool flag2 = Misc.GameWorld != null && Misc.GameWorld.RegisteredPlayers != null && Misc.MainCamera != null;
					if (flag2)
					{
						Misc.GamePlayers.Clear();
						foreach (Player player in Misc.GameWorld.RegisteredPlayers)
						{
							bool flag3 = player != null;
							if (flag3)
							{
								bool flag4 = player.IsYourPlayer();
								if (flag4)
								{
									Misc.LocalPlayer = player;
									continue;
								}
							}
							bool flag5 = !GameUtils.IsPlayerAlive(player) || Vector3.Distance(Misc.MainCamera.transform.position, player.Transform.position) > this._maximumPlayerDistance;
							if (!flag5)
							{
								Misc.GamePlayers.Add(new GamePlayer(player));
							}
						}
						this._nextPlayerCacheTime = Time.time + Misc._cachePlayersInterval;
					}
				}
				foreach (GamePlayer gamePlayer in Misc.GamePlayers)
				{
					bool flag6 = gamePlayer != null;
					if (flag6)
					{
						gamePlayer.RecalculateDynamics();
					}
				}
				bool extraction = Config.ESP.ItemEsp.extraction;
				if (extraction)
				{
					bool flag7 = Time.time >= this._nextLootItemCacheTime;
					if (flag7)
					{
						bool flag8 = Misc.GameWorld != null && Misc.GameWorld.ExfiltrationController.ExfiltrationPoints != null;
						if (flag8)
						{
							this._gameExfiltrationPoints.Clear();
							foreach (ExfiltrationPoint exfiltrationPoint in Misc.GameWorld.ExfiltrationController.ExfiltrationPoints)
							{
								bool flag9 = !GameUtils.IsExfiltrationPointValid(exfiltrationPoint);
								if (!flag9)
								{
									this._gameExfiltrationPoints.Add(new GameExfiltrationPoint(exfiltrationPoint));
								}
							}
							this._nextLootItemCacheTime = Time.time + Misc.CacheExfiltrationPointInterval;
						}
					}
					foreach (GameExfiltrationPoint gameExfiltrationPoint in this._gameExfiltrationPoints)
					{
						bool flag10 = gameExfiltrationPoint != null;
						if (flag10)
						{
							gameExfiltrationPoint.RecalculateDynamics();
						}
					}
				}
				bool quest = Config.ESP.ItemEsp.Quest;
				if (quest)
				{
					bool flag11 = Time.time >= this._nextLootItemCacheTime && Misc.GameWorld != null && Misc.GameWorld.LootItems != null && Misc.LocalPlayer != null && !MonoBehaviourSingleton<PreloaderUI>.Instance.IsBackgroundBlackActive && Misc.MainCamera != null;
					if (flag11)
					{
						this._gameLootItems.Clear();
						for (int j = 0; j < Misc.GameWorld.LootItems.Count; j++)
						{
							LootItem byIndex = Misc.GameWorld.LootItems.GetByIndex(j);
							bool flag12 = GameUtils.IsLootItemValid(byIndex) && Vector3.Distance(Misc.MainCamera.transform.position, byIndex.transform.position) <= 5000f;
							if (flag12)
							{
								this._gameLootItems.Add(new GameLootItem(byIndex));
							}
						}
						this._nextLootItemCacheTime = Time.time + Misc.CacheLootItemsInterval1;
					}
					foreach (GameLootItem gameLootItem in this._gameLootItems)
					{
						bool flag13 = gameLootItem != null;
						if (flag13)
						{
							gameLootItem.RecalculateDynamics();
						}
					}
				}
			}
			catch
			{
			}
		}

		// Token: 0x060000CE RID: 206 RVA: 0x0000BA28 File Offset: 0x00009C28
		private IEnumerator chamstest()
		{
			for (;;)
			{
				try
				{
					bool flag = Time.time >= this.nextShaderUpdateTime;
					if (flag)
					{
						foreach (Player gamePlayer in Misc.GameWorld.RegisteredPlayers)
						{
							bool flag2 = !GameUtils.IsPlayerAlive(gamePlayer) || gamePlayer.IsYourPlayer();
							if (!flag2)
							{
								foreach (object obj in Enum.GetValues(typeof(EBodyModelPart)))
								{
									EBodyModelPart bodyModelPart = (EBodyModelPart)obj;
									foreach (Renderer r in gamePlayer.PlayerBody.BodySkins[bodyModelPart].GetRenderers())
									{
										bool chams = Config.ESP.chams;
										if (chams)
										{
											bool flag3 = !Misc.dictShaders.ContainsKey(r.material.name);
											if (flag3)
											{
												Misc.dictShaders.Add(r.material.name, r.material.shader);
											}
											bool flag4 = r.material.shader != Misc.chamShader;
											if (flag4)
											{
												r.material.shader = Misc.chamShader;
											}
										}
										else
										{
											bool flag5 = Misc.dictShaders.ContainsKey(r.material.name);
											if (flag5)
											{
												bool flag6 = r.material.shader == Misc.chamShader;
												if (flag6)
												{
													r.material.shader = Misc.dictShaders[r.material.name];
												}
											}
										}
										r = null;
									}
									IEnumerator<Renderer> enumerator3 = null;
								}
								IEnumerator enumerator2 = null;
								this.nextShaderUpdateTime = Time.time + Misc._shaderUpdateInterval;
								gamePlayer = null;
							}
						}
						List<Player>.Enumerator enumerator = default(List<Player>.Enumerator);
					}
				}
				catch (Exception)
				{
				}
				yield return new WaitForSeconds(1f);
			}
			yield break;
		}

		// Token: 0x060000CF RID: 207 RVA: 0x0000BA38 File Offset: 0x00009C38
		public static bool IsSecureContainer(Item item)
		{
			return true;
		}

		// Token: 0x060000D0 RID: 208 RVA: 0x0000BA4C File Offset: 0x00009C4C
		public static bool IsSecureContainerTrampoline(Item item)
		{
			int num = 12;
			int num2 = 9;
			int num3 = 104;
			int num4 = num3 * num - 15;
			int num5 = num4 + num;
			int num6 = num2 + num3;
			num = num2 + 12;
			num2 = num3 - 4;
			num4 = num + num2;
			num5 = num + num3 + num4;
			return true;
		}

		// Token: 0x060000D1 RID: 209 RVA: 0x0000BA90 File Offset: 0x00009C90
		private void Start()
		{
			Drawing1.Initialize();
			Misc.friendsList = new HashSet<string>();
			bool flag = Misc.chamShader == null;
			if (flag)
			{
				AssetBundle assetBundle = AssetBundle.LoadFromMemory(Misc.Chams.chams);
				object[] array = assetBundle.LoadAllAssets();
				object[] array2 = array;
				foreach (object obj in array2)
				{
					bool flag2 = obj.GetType() == typeof(Shader);
					if (flag2)
					{
						Misc.chamShader = (Shader)obj;
					}
				}
				assetBundle.Unload(false);
			}
			base.StartCoroutine(this.chamstest());
		}

		// Token: 0x060000D2 RID: 210 RVA: 0x0000BB34 File Offset: 0x00009D34
		private string fuckinniger(string id)
		{
			bool flag = id.Contains("p226");
			string result;
			if (flag)
			{
				result = "P226R";
			}
			else
			{
				bool flag2 = id.Contains("mp443");
				if (flag2)
				{
					result = "MP443";
				}
				else
				{
					bool flag3 = id.Contains("aks74");
					if (flag3)
					{
						result = "AKS-74";
					}
					else
					{
						bool flag4 = id.Contains("_mr133_");
						if (flag4)
						{
							result = "MR-133";
						}
						else
						{
							bool flag5 = id.Contains("_mr153_");
							if (flag5)
							{
								result = "MR-153";
							}
							else
							{
								bool flag6 = id.Contains("saiga12");
								if (flag6)
								{
									result = "Saig.12";
								}
								else
								{
									bool flag7 = id.Contains("akm");
									if (flag7)
									{
										result = "AKM";
									}
									else
									{
										bool flag8 = id.Contains("ak74n");
										if (flag8)
										{
											result = "AK-7N";
										}
										else
										{
											bool flag9 = id.Contains("ak74m");
											if (flag9)
											{
												result = "AK-7M";
											}
											else
											{
												bool flag10 = id.Contains("mr43e");
												if (flag10)
												{
													result = "MR-43E";
												}
												else
												{
													bool flag11 = id.Contains("model_870");
													if (flag11)
													{
														result = "M870";
													}
													else
													{
														bool flag12 = id.Contains("mosin");
														if (flag12)
														{
															result = "Mosin";
														}
														else
														{
															bool flag13 = id.Contains("_zarya_");
															if (flag13)
															{
																result = "Zarya";
															}
															else
															{
																bool flag14 = id.Contains("_pb_");
																if (flag14)
																{
																	result = "PB9x18PM";
																}
																else
																{
																	bool flag15 = id.Contains("_izhmeh_pm_");
																	if (flag15)
																	{
																		result = "Makarov";
																	}
																	else
																	{
																		bool flag16 = id.Contains("saiga_9");
																		if (flag16)
																		{
																			result = "SaigaPM";
																		}
																		else
																		{
																			bool flag17 = id.Contains("_tt_");
																			if (flag17)
																			{
																				result = "TT";
																			}
																			else
																			{
																				bool flag18 = id.Contains("pp-9");
																				if (flag18)
																				{
																					result = "pp91";
																				}
																				else
																				{
																					bool flag19 = id.Contains("vepr");
																					if (flag19)
																					{
																						result = "VEPR";
																					}
																					else
																					{
																						bool flag20 = id.Contains("glock");
																						if (flag20)
																						{
																							result = "Glock";
																						}
																						else
																						{
																							bool flag21 = id.Contains("sks");
																							if (flag21)
																							{
																								result = "SKS";
																							}
																							else
																							{
																								bool flag22 = id.Contains("akms");
																								if (flag22)
																								{
																									result = "AKMS";
																								}
																								else
																								{
																									bool flag23 = id.Contains("akm_vpo");
																									if (flag23)
																									{
																										result = "AKM VPO";
																									}
																									else
																									{
																										bool flag24 = id.Contains("vepr_km");
																										if (flag24)
																										{
																											result = "VEPR KM VPO";
																										}
																										else
																										{
																											bool flag25 = id.Contains("mp5");
																											if (flag25)
																											{
																												result = "MP5";
																											}
																											else
																											{
																												bool flag26 = id.Contains("mp7a1");
																												if (flag26)
																												{
																													result = "MP7";
																												}
																												else
																												{
																													bool flag27 = id.Contains("_mpx_");
																													if (flag27)
																													{
																														result = "MPX";
																													}
																													else
																													{
																														bool flag28 = id.Contains("molot_aps");
																														if (flag28)
																														{
																															result = "Molot";
																														}
																														else
																														{
																															bool flag29 = id.Contains("m1a");
																															if (flag29)
																															{
																																result = "m1a";
																															}
																															else
																															{
																																bool flag30 = id.Contains("sa58");
																																if (flag30)
																																{
																																	result = "SA58";
																																}
																																else
																																{
																																	bool flag31 = id.Contains("ak101");
																																	if (flag31)
																																	{
																																		result = "AK101";
																																	}
																																	else
																																	{
																																		bool flag32 = id.Contains("ak102");
																																		if (flag32)
																																		{
																																			result = "AK102";
																																		}
																																		else
																																		{
																																			bool flag33 = id.Contains("ak103");
																																			if (flag33)
																																			{
																																				result = "AK103";
																																			}
																																			else
																																			{
																																				bool flag34 = id.Contains("ak104");
																																				if (flag34)
																																				{
																																					result = "AK104";
																																				}
																																				else
																																				{
																																					bool flag35 = id.Contains("ak105");
																																					if (flag35)
																																					{
																																						result = "AK105";
																																					}
																																					else
																																					{
																																						bool flag36 = id.Contains("m4a1");
																																						if (flag36)
																																						{
																																							result = "M4A1";
																																						}
																																						else
																																						{
																																							bool flag37 = id.Contains("sv-98");
																																							if (flag37)
																																							{
																																								result = "SV-98";
																																							}
																																							else
																																							{
																																								bool flag38 = id.Contains("_val_");
																																								if (flag38)
																																								{
																																									result = "ASVAL";
																																								}
																																								else
																																								{
																																									bool flag39 = id.Contains("_vss_");
																																									if (flag39)
																																									{
																																										result = "VSS";
																																									}
																																									else
																																									{
																																										bool flag40 = id.Contains("rsass");
																																										if (flag40)
																																										{
																																											result = "RSASS";
																																										}
																																										else
																																										{
																																											bool flag41 = id.Contains("dvl-10");
																																											if (flag41)
																																											{
																																												result = "DVL10";
																																											}
																																											else
																																											{
																																												result = id;
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			return result;
		}

		// Token: 0x060000D3 RID: 211 RVA: 0x0000BFB0 File Offset: 0x0000A1B0
		private void Addfriendxddd()
		{
			Dictionary<Player, int> dictionary = new Dictionary<Player, int>();
			Vector2 vector;
			vector..ctor((float)Screen.width / 2f, (float)Screen.height / 2f);
			Vector3 zero = Vector3.zero;
			foreach (GamePlayer gamePlayer in Misc.GamePlayers)
			{
				int num = (int)Vector2.Distance(Misc.MainCamera.WorldToScreenPoint(gamePlayer.Player.PlayerBones.Head.position), vector);
				int num2 = (int)Vector3.Distance(Misc.LocalPlayer.Transform.position, gamePlayer.Player.Transform.position);
				Vector3 vector2 = gamePlayer.Player.Transform.position - Misc.MainCamera.transform.position;
				bool flag = !MonoBehaviourSingleton<PreloaderUI>.Instance.IsBackgroundBlackActive && (float)num2 <= Main.distancefrome && (float)num <= Main.distancefromcenter && Vector3.Dot(Misc.MainCamera.transform.TransformDirection(Vector3.forward), vector2) > 0f;
				if (flag)
				{
					dictionary.Add(gamePlayer.Player, num);
				}
			}
			bool flag2 = (double)dictionary.Count > 0.01;
			if (flag2)
			{
				dictionary = (from pair in dictionary
				orderby pair.Value
				select pair).ToDictionary((KeyValuePair<Player, int> pair) => pair.Key, (KeyValuePair<Player, int> pair) => pair.Value);
				Player player = dictionary.Keys.First<Player>();
				Vector3 vector3 = Camera.main.WorldToScreenPoint(player.Transform.position);
				int num3 = (int)Vector3.Distance(Misc.MainCamera.transform.position, player.Transform.position);
				Vector3 vector4 = player.PlayerBones.Head.position + new Vector3(0f, 0.07246377f, 0f);
				Vector3 vector5 = Camera.main.WorldToScreenPoint(player.Transform.position);
				Weapon weapon = Misc.LocalPlayer.Weapon;
				bool flag3 = (double)vector5.z > 0.01 && weapon != null;
				if (flag3)
				{
					bool flag4 = !Misc.friendsList.Contains(player.Profile.Info.Nickname);
					if (flag4)
					{
						Misc.friendsList.Add(player.Profile.Info.Nickname);
					}
					else
					{
						Misc.friendsList.Remove(player.Profile.Info.Nickname);
					}
				}
			}
		}

		// Token: 0x060000D4 RID: 212 RVA: 0x0000C2B0 File Offset: 0x0000A4B0
		public static bool IsFriend(Player player)
		{
			return player != null && Misc.friendsList.Contains(player.Profile.Info.Nickname);
		}

		// Token: 0x060000D5 RID: 213 RVA: 0x0000C2E8 File Offset: 0x0000A4E8
		private bool TestVisible(Transform target)
		{
			Ray ray;
			ray..ctor(Misc.MainCamera.transform.position, target.position - Misc.MainCamera.transform.position);
			RaycastHit raycastHit;
			bool flag = Physics.Raycast(ray, ref raycastHit, 200f);
			return flag && raycastHit.transform.root == target.root;
		}

		// Token: 0x060000D6 RID: 214 RVA: 0x0000C358 File Offset: 0x0000A558
		private void OnGUI()
		{
			Rendering.DrawWatermark("pasta", Color.white, 12);
			try
			{
				bool flag = !Renders.initialized;
				if (flag)
				{
					Renders.Initialize();
				}
				foreach (GamePlayer gamePlayer in Misc.GamePlayers)
				{
					bool isOnScreen = gamePlayer.IsOnScreen;
					if (isOnScreen)
					{
						bool flag2 = gamePlayer.Player.Profile.Info.Nickname == "chasepasteson";
						bool flag3 = gamePlayer.Player.Profile.Info.Nickname == "HNICOS";
						float num = Mathf.Abs(gamePlayer.ScreenPosition.y - gamePlayer.HeadScreenPosition.y);
						float width = num / 2f;
						float current = gamePlayer.Player.HealthController.GetBodyPartHealth(7, false).Current;
						string text = "unknown";
						try
						{
							text = gamePlayer.Player.Weapon.Template.ShortName;
						}
						catch
						{
							text = "unknown";
						}
						bool flag4 = gamePlayer.Distance <= Misc.scavdistance && Config.ESP.Scav && gamePlayer.Player.Profile.Info.RegistrationDate <= 0 && gamePlayer.Scav && !\uE479.IsBoss(gamePlayer.Player.Profile.Info.Settings) && !Misc.friendsList.Contains(gamePlayer.Player.Profile.Info.Nickname);
						if (flag4)
						{
							Rendering.DrawVerticalHealth(new Vector2(gamePlayer.HeadScreenPosition.x, gamePlayer.HeadScreenPosition.y), width, num, current);
							Rendering.DrawString1(new Vector2(gamePlayer.ScreenPosition.x, gamePlayer.ScreenPosition.y), string.Format("{0} [{1}]", "Scav", gamePlayer.FormattedDistance), Main.scavcolor, true, 8, FontStyle.Bold, 1);
							Rendering.CornerBox(new Vector2(gamePlayer.HeadScreenPosition.x, gamePlayer.HeadScreenPosition.y), num / 2.5f, num, 3f, Main.scavcolor, false);
							Rendering.DrawString1(new Vector2(gamePlayer.ScreenPosition.x, gamePlayer.ScreenPosition.y - -10f), text, Main.scavcolor, true, 8, FontStyle.Bold, 1);
						}
						bool flag5 = gamePlayer.Distance <= Misc.scavdistance && Config.ESP.Scav && \uE479.IsBoss(gamePlayer.Player.Profile.Info.Settings) && !Misc.friendsList.Contains(gamePlayer.Player.Profile.Info.Nickname);
						if (flag5)
						{
							Rendering.DrawVerticalHealth(new Vector2(gamePlayer.HeadScreenPosition.x, gamePlayer.HeadScreenPosition.y), width, num, current);
							Rendering.DrawString1(new Vector2(gamePlayer.ScreenPosition.x, gamePlayer.ScreenPosition.y), string.Format("{0} [{1}]", "BossScav", gamePlayer.FormattedDistance), Main.scavcolor, true, 8, FontStyle.Bold, 1);
							Rendering.CornerBox(new Vector2(gamePlayer.HeadScreenPosition.x, gamePlayer.HeadScreenPosition.y), num / 2.5f, num, 3f, Main.scavcolor, false);
							Rendering.DrawString1(new Vector2(gamePlayer.ScreenPosition.x, gamePlayer.ScreenPosition.y - -10f), text, Main.scavcolor, true, 8, FontStyle.Bold, 1);
						}
						bool flag6 = !flag2 && !flag3 && gamePlayer.Distance <= Misc.playerdistance;
						if (flag6)
						{
							bool flag7 = Config.ESP.Box && !gamePlayer.Scav && !Misc.friendsList.Contains(gamePlayer.Player.Profile.Info.Nickname);
							if (flag7)
							{
								Rendering.CornerBox(new Vector2(gamePlayer.HeadScreenPosition.x, gamePlayer.HeadScreenPosition.y), num / 2.5f, num, 3f, Main.PlayerColor, false);
							}
							bool flag8 = Config.ESP.drawfriend && Misc.friendsList.Contains(gamePlayer.Player.Profile.Info.Nickname);
							if (flag8)
							{
								Rendering.DrawString1(new Vector2(gamePlayer.ScreenPosition.x, gamePlayer.ScreenPosition.y - -10f), text, Main.PlayerColor, true, 8, FontStyle.Bold, 1);
								Rendering.DrawString1(new Vector2(gamePlayer.ScreenPosition.x, gamePlayer.ScreenPosition.y - -30f), "Friend <3", Color.green, true, 8, FontStyle.Bold, 1);
								Rendering.DrawVerticalHealth(new Vector2(gamePlayer.HeadScreenPosition.x, gamePlayer.HeadScreenPosition.y), width, num, current);
								Rendering.DrawString1(new Vector2(gamePlayer.ScreenPosition.x, gamePlayer.ScreenPosition.y), string.Format("{0} [{1}]", gamePlayer.Player.Profile.Info.Nickname, gamePlayer.FormattedDistance), Main.PlayerColor, true, 8, FontStyle.Bold, 1);
							}
							bool flag9 = Config.ESP.health && !gamePlayer.Scav && !Misc.friendsList.Contains(gamePlayer.Player.Profile.Info.Nickname);
							if (flag9)
							{
								Rendering.DrawVerticalHealth(new Vector2(gamePlayer.HeadScreenPosition.x, gamePlayer.HeadScreenPosition.y), width, num, current);
							}
							bool flag10 = Config.ESP.PlayerEsp && !gamePlayer.Scav && !Misc.friendsList.Contains(gamePlayer.Player.Profile.Info.Nickname);
							if (flag10)
							{
								Rendering.DrawString1(new Vector2(gamePlayer.ScreenPosition.x, gamePlayer.ScreenPosition.y), string.Format("{0} [{1}]", gamePlayer.Player.Profile.Info.Nickname, gamePlayer.FormattedDistance), Main.PlayerColor, true, 8, FontStyle.Bold, 1);
							}
							bool flag11 = Config.ESP.HeldWeapon && !gamePlayer.Scav && !Misc.friendsList.Contains(gamePlayer.Player.Profile.Info.Nickname);
							if (flag11)
							{
								Rendering.DrawString1(new Vector2(gamePlayer.ScreenPosition.x, gamePlayer.ScreenPosition.y - -10f), text, Main.PlayerColor, true, 8, FontStyle.Bold, 1);
							}
						}
					}
				}
				bool quest = Config.ESP.ItemEsp.Quest;
				if (quest)
				{
					foreach (GameLootItem gameLootItem in this._gameLootItems)
					{
						bool questItem = gameLootItem.LootItem.Item.Template.QuestItem;
						if (questItem)
						{
							Vector3 vector = Misc.MainCamera.WorldToScreenPoint(gameLootItem.LootItem.transform.position);
							bool flag12 = vector.z > 0f;
							if (flag12)
							{
								bool flag13 = gameLootItem.LootItem != null && gameLootItem.LootItem.Item != null && gameLootItem.LootItem.Item.Template != null;
								if (flag13)
								{
									int num2 = (int)Vector3.Distance(Misc.MainCamera.transform.position, gameLootItem.LootItem.transform.position);
									bool flag14 = (float)num2 <= Misc.questitemdistance;
									if (flag14)
									{
										vector.x += 3f;
										vector.y = (float)Screen.height - (vector.y + 1f);
										string arg = \uE4E3.Localized(gameLootItem.LootItem.Item.ShortName) + " [" + gameLootItem.FormattedDistance + "]";
										Rendering.DrawString1(new Vector2(gameLootItem.ScreenPosition.x - 50f, gameLootItem.ScreenPosition.y), string.Format("{0}", arg), Main.questitemcolor, true, 8, FontStyle.Bold, 1);
									}
								}
							}
						}
					}
				}
				bool extraction = Config.ESP.ItemEsp.extraction;
				if (extraction)
				{
					foreach (GameExfiltrationPoint gameExfiltrationPoint in this._gameExfiltrationPoints)
					{
						Vector3 vector2 = Misc.MainCamera.WorldToScreenPoint(gameExfiltrationPoint.ExfiltrationPoint.transform.position);
						bool flag15 = vector2.z > 0f;
						if (flag15)
						{
							bool flag16 = gameExfiltrationPoint.ExfiltrationPoint != null;
							if (flag16)
							{
								int num3 = (int)Vector3.Distance(Misc.MainCamera.transform.position, gameExfiltrationPoint.ExfiltrationPoint.transform.position);
								bool flag17 = (float)num3 <= 8000f;
								if (flag17)
								{
									vector2.x += 3f;
									vector2.y = (float)Screen.height - (vector2.y + 1f);
									string arg2 = gameExfiltrationPoint.ExfiltrationPoint.Settings.Name + " [" + gameExfiltrationPoint.FormattedDistance + "]";
									Rendering.DrawString1(new Vector2(gameExfiltrationPoint.ScreenPosition.x - 50f, gameExfiltrationPoint.ScreenPosition.y), string.Format("{0}", arg2), Main.extractioncolor, true, 10, FontStyle.Bold, 1);
								}
							}
						}
					}
				}
			}
			catch
			{
			}
		}

		// Token: 0x04000076 RID: 118
		public static Dictionary<string, float> originalRepeatDelay = new Dictionary<string, float>();

		// Token: 0x04000077 RID: 119
		public static FieldInfo groundAngle = null;

		// Token: 0x04000078 RID: 120
		public static FieldInfo groundAngleNew = null;

		// Token: 0x04000079 RID: 121
		private float _maximumPlayerDistance = 1000f;

		// Token: 0x0400007A RID: 122
		private static readonly float _cachePlayersInterval = 1f;

		// Token: 0x0400007B RID: 123
		public static List<GamePlayer> GamePlayers = new List<GamePlayer>();

		// Token: 0x0400007C RID: 124
		private float _nextPlayerCacheTime;

		// Token: 0x0400007D RID: 125
		public static Player LocalPlayer;

		// Token: 0x0400007E RID: 126
		public static GameWorld GameWorld;

		// Token: 0x0400007F RID: 127
		public static Camera MainCamera;

		// Token: 0x04000080 RID: 128
		private float nextShaderUpdateTime = 0f;

		// Token: 0x04000081 RID: 129
		private static readonly float _shaderUpdateInterval = 5f;

		// Token: 0x04000082 RID: 130
		public static float playerdistance;

		// Token: 0x04000083 RID: 131
		public static float scavdistance;

		// Token: 0x04000084 RID: 132
		private List<GameExfiltrationPoint> _gameExfiltrationPoints = new List<GameExfiltrationPoint>();

		// Token: 0x04000085 RID: 133
		private static readonly float CacheExfiltrationPointInterval = 5f;

		// Token: 0x04000086 RID: 134
		private float _nextLootItemCacheTime;

		// Token: 0x04000087 RID: 135
		public static float containerdistance;

		// Token: 0x04000089 RID: 137
		public static float distance;

		// Token: 0x0400008A RID: 138
		private static readonly float CacheLootItemsInterval1 = 1.5f;

		// Token: 0x0400008B RID: 139
		private static readonly float grenadeinterval = 0.5f;

		// Token: 0x0400008C RID: 140
		private static readonly Color SpecialColor = new Color(1f, 0.2f, 0.09f);

		// Token: 0x0400008D RID: 141
		private List<GameLootItem> _gameLootItems = new List<GameLootItem>();

		// Token: 0x0400008E RID: 142
		public static List<string> SpecialLootItems;

		// Token: 0x0400008F RID: 143
		public static float questitemdistance;

		// Token: 0x04000090 RID: 144
		public static float speedvalue;

		// Token: 0x04000091 RID: 145
		public static Shader chamShader;

		// Token: 0x04000092 RID: 146
		public static FieldInfo _multiMesh = null;

		// Token: 0x04000093 RID: 147
		public static Dictionary<string, Shader> dictShaders = new Dictionary<string, Shader>();

		// Token: 0x04000094 RID: 148
		public static HashSet<string> friendsList;

		// Token: 0x02000029 RID: 41
		public static class Chams
		{
			// Token: 0x040000F1 RID: 241
			public static byte[] chams = new byte[]
			{
				85,
				110,
				105,
				116,
				121,
				70,
				83,
				0,
				0,
				0,
				0,
				6,
				53,
				46,
				120,
				46,
				120,
				0,
				50,
				48,
				49,
				55,
				46,
				50,
				46,
				49,
				102,
				49,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				19,
				45,
				0,
				0,
				0,
				65,
				0,
				0,
				0,
				91,
				0,
				0,
				0,
				67,
				30,
				0,
				1,
				0,
				178,
				1,
				0,
				0,
				146,
				104,
				0,
				0,
				18,
				187,
				0,
				65,
				14,
				0,
				8,
				29,
				0,
				0,
				26,
				0,
				240,
				24,
				0,
				4,
				67,
				65,
				66,
				45,
				100,
				98,
				51,
				52,
				54,
				100,
				54,
				57,
				49,
				100,
				55,
				97,
				99,
				99,
				52,
				100,
				99,
				50,
				54,
				50,
				53,
				100,
				98,
				49,
				57,
				102,
				57,
				101,
				51,
				102,
				53,
				50,
				0,
				93,
				0,
				0,
				8,
				0,
				0,
				0,
				97,
				234,
				139,
				80,
				29,
				88,
				134,
				175,
				106,
				91,
				42,
				98,
				190,
				139,
				125,
				241,
				154,
				114,
				42,
				70,
				byte.MaxValue,
				152,
				235,
				140,
				64,
				253,
				206,
				144,
				38,
				119,
				24,
				214,
				182,
				25,
				129,
				244,
				135,
				104,
				209,
				182,
				4,
				75,
				254,
				3,
				37,
				25,
				226,
				133,
				234,
				111,
				97,
				101,
				214,
				127,
				236,
				117,
				158,
				51,
				50,
				156,
				4,
				152,
				29,
				161,
				249,
				8,
				248,
				166,
				249,
				217,
				231,
				158,
				229,
				124,
				213,
				223,
				29,
				107,
				3,
				84,
				175,
				165,
				1,
				246,
				165,
				22,
				33,
				76,
				51,
				14,
				102,
				74,
				148,
				17,
				166,
				213,
				142,
				42,
				9,
				214,
				117,
				62,
				98,
				188,
				126,
				28,
				177,
				177,
				227,
				220,
				100,
				151,
				71,
				72,
				17,
				34,
				53,
				239,
				220,
				131,
				243,
				1,
				byte.MaxValue,
				231,
				147,
				71,
				247,
				98,
				202,
				218,
				176,
				20,
				191,
				81,
				138,
				193,
				48,
				110,
				27,
				194,
				196,
				210,
				128,
				243,
				178,
				4,
				143,
				101,
				214,
				15,
				232,
				10,
				253,
				176,
				215,
				222,
				30,
				72,
				193,
				100,
				17,
				37,
				170,
				49,
				161,
				71,
				81,
				4,
				230,
				64,
				125,
				100,
				22,
				201,
				148,
				119,
				1,
				142,
				146,
				166,
				21,
				187,
				2,
				168,
				243,
				128,
				203,
				35,
				12,
				168,
				118,
				126,
				248,
				63,
				210,
				94,
				29,
				136,
				241,
				250,
				101,
				90,
				114,
				221,
				167,
				214,
				94,
				79,
				245,
				122,
				77,
				193,
				138,
				197,
				17,
				192,
				216,
				231,
				37,
				25,
				210,
				248,
				65,
				223,
				108,
				175,
				160,
				144,
				29,
				174,
				35,
				227,
				10,
				32,
				179,
				121,
				224,
				241,
				158,
				32,
				153,
				98,
				109,
				51,
				171,
				232,
				222,
				30,
				169,
				142,
				239,
				118,
				113,
				1,
				150,
				75,
				43,
				165,
				195,
				174,
				229,
				212,
				70,
				170,
				189,
				79,
				170,
				155,
				135,
				20,
				249,
				102,
				208,
				123,
				214,
				88,
				50,
				217,
				131,
				191,
				229,
				134,
				77,
				140,
				165,
				10,
				146,
				235,
				76,
				70,
				207,
				86,
				149,
				14,
				198,
				117,
				124,
				17,
				44,
				245,
				5,
				161,
				194,
				57,
				234,
				128,
				243,
				101,
				250,
				212,
				126,
				179,
				77,
				149,
				194,
				148,
				9,
				145,
				87,
				113,
				153,
				242,
				6,
				97,
				81,
				86,
				88,
				65,
				212,
				203,
				75,
				173,
				115,
				224,
				135,
				172,
				246,
				237,
				215,
				109,
				55,
				87,
				10,
				6,
				20,
				251,
				213,
				124,
				161,
				217,
				195,
				44,
				233,
				55,
				238,
				161,
				157,
				128,
				124,
				48,
				179,
				224,
				133,
				179,
				222,
				153,
				100,
				17,
				237,
				147,
				122,
				99,
				182,
				222,
				214,
				167,
				201,
				165,
				210,
				73,
				200,
				222,
				55,
				80,
				95,
				49,
				223,
				157,
				195,
				17,
				240,
				157,
				119,
				100,
				12,
				229,
				207,
				57,
				161,
				115,
				239,
				98,
				82,
				123,
				35,
				91,
				246,
				183,
				106,
				57,
				179,
				3,
				250,
				72,
				99,
				byte.MaxValue,
				172,
				3,
				114,
				68,
				200,
				54,
				190,
				211,
				235,
				221,
				9,
				54,
				119,
				174,
				235,
				227,
				225,
				102,
				195,
				83,
				27,
				189,
				70,
				36,
				49,
				105,
				135,
				237,
				216,
				36,
				95,
				71,
				182,
				171,
				159,
				242,
				186,
				136,
				251,
				132,
				93,
				58,
				56,
				140,
				106,
				31,
				245,
				88,
				228,
				7,
				71,
				20,
				153,
				190,
				204,
				41,
				120,
				187,
				191,
				184,
				157,
				182,
				101,
				198,
				207,
				181,
				121,
				127,
				99,
				184,
				229,
				128,
				91,
				2,
				223,
				164,
				245,
				105,
				190,
				121,
				211,
				221,
				89,
				49,
				216,
				65,
				35,
				133,
				160,
				114,
				39,
				4,
				176,
				92,
				60,
				52,
				131,
				168,
				84,
				53,
				213,
				122,
				87,
				1,
				85,
				47,
				241,
				169,
				1,
				110,
				250,
				148,
				69,
				107,
				98,
				126,
				96,
				243,
				3,
				91,
				156,
				193,
				122,
				63,
				115,
				120,
				72,
				116,
				31,
				252,
				220,
				198,
				186,
				45,
				20,
				28,
				213,
				95,
				203,
				183,
				208,
				42,
				151,
				207,
				242,
				90,
				79,
				15,
				166,
				81,
				159,
				172,
				232,
				40,
				232,
				242,
				17,
				215,
				104,
				47,
				45,
				43,
				42,
				246,
				149,
				253,
				216,
				80,
				44,
				29,
				49,
				214,
				227,
				196,
				235,
				240,
				149,
				6,
				212,
				192,
				81,
				32,
				101,
				33,
				113,
				153,
				110,
				244,
				250,
				244,
				204,
				70,
				113,
				187,
				79,
				93,
				62,
				204,
				0,
				71,
				25,
				162,
				227,
				233,
				12,
				16,
				231,
				112,
				114,
				222,
				231,
				165,
				134,
				83,
				37,
				55,
				114,
				66,
				227,
				218,
				191,
				250,
				22,
				246,
				37,
				176,
				232,
				109,
				10,
				94,
				131,
				102,
				173,
				67,
				200,
				164,
				154,
				160,
				21,
				52,
				206,
				250,
				215,
				152,
				90,
				72,
				50,
				52,
				42,
				80,
				5,
				215,
				197,
				198,
				215,
				127,
				62,
				226,
				214,
				112,
				203,
				188,
				213,
				33,
				175,
				219,
				83,
				105,
				108,
				147,
				214,
				200,
				181,
				136,
				175,
				10,
				223,
				36,
				249,
				216,
				5,
				76,
				84,
				149,
				37,
				74,
				50,
				217,
				90,
				91,
				124,
				217,
				137,
				224,
				165,
				142,
				20,
				34,
				33,
				107,
				213,
				127,
				20,
				178,
				88,
				68,
				16,
				117,
				173,
				47,
				173,
				152,
				51,
				217,
				114,
				217,
				110,
				72,
				249,
				148,
				112,
				99,
				43,
				55,
				52,
				129,
				183,
				148,
				42,
				211,
				111,
				76,
				240,
				159,
				211,
				0,
				155,
				1,
				22,
				67,
				74,
				10,
				176,
				17,
				30,
				164,
				39,
				126,
				9,
				133,
				151,
				byte.MaxValue,
				170,
				247,
				29,
				179,
				100,
				219,
				116,
				161,
				209,
				47,
				240,
				180,
				104,
				142,
				22,
				13,
				142,
				75,
				41,
				252,
				177,
				166,
				142,
				198,
				136,
				194,
				125,
				30,
				28,
				179,
				99,
				128,
				36,
				31,
				116,
				173,
				96,
				84,
				106,
				122,
				26,
				237,
				159,
				221,
				41,
				byte.MaxValue,
				127,
				65,
				120,
				90,
				32,
				249,
				189,
				106,
				208,
				171,
				42,
				2,
				2,
				29,
				230,
				252,
				59,
				230,
				19,
				21,
				158,
				245,
				50,
				121,
				89,
				250,
				214,
				89,
				93,
				242,
				64,
				23,
				186,
				204,
				215,
				165,
				110,
				160,
				89,
				169,
				220,
				8,
				111,
				129,
				119,
				49,
				19,
				78,
				84,
				40,
				94,
				246,
				234,
				185,
				24,
				27,
				49,
				232,
				byte.MaxValue,
				125,
				251,
				222,
				180,
				83,
				161,
				213,
				243,
				242,
				89,
				76,
				145,
				0,
				57,
				144,
				111,
				133,
				208,
				12,
				244,
				67,
				111,
				148,
				72,
				163,
				8,
				141,
				127,
				205,
				250,
				111,
				180,
				56,
				147,
				192,
				68,
				167,
				252,
				239,
				129,
				147,
				211,
				1,
				126,
				152,
				165,
				108,
				53,
				117,
				91,
				240,
				165,
				241,
				118,
				164,
				135,
				43,
				170,
				31,
				35,
				182,
				252,
				175,
				34,
				44,
				114,
				168,
				215,
				231,
				218,
				224,
				91,
				97,
				27,
				160,
				33,
				98,
				183,
				79,
				20,
				36,
				87,
				126,
				208,
				161,
				156,
				34,
				104,
				59,
				177,
				34,
				26,
				69,
				26,
				114,
				220,
				227,
				66,
				80,
				201,
				65,
				136,
				45,
				230,
				95,
				59,
				137,
				32,
				103,
				28,
				126,
				22,
				161,
				132,
				102,
				205,
				61,
				166,
				128,
				181,
				161,
				149,
				56,
				205,
				4,
				240,
				31,
				49,
				89,
				89,
				219,
				134,
				32,
				184,
				179,
				164,
				32,
				165,
				118,
				196,
				57,
				2,
				5,
				237,
				154,
				183,
				166,
				49,
				227,
				56,
				153,
				239,
				150,
				42,
				163,
				198,
				201,
				17,
				110,
				100,
				243,
				254,
				241,
				126,
				231,
				80,
				33,
				21,
				195,
				52,
				113,
				154,
				74,
				80,
				225,
				104,
				75,
				184,
				4,
				141,
				228,
				43,
				126,
				142,
				63,
				236,
				153,
				147,
				76,
				65,
				31,
				217,
				24,
				53,
				63,
				138,
				252,
				201,
				14,
				221,
				23,
				137,
				100,
				200,
				118,
				19,
				232,
				236,
				21,
				12,
				126,
				247,
				117,
				5,
				81,
				175,
				93,
				167,
				82,
				188,
				191,
				135,
				197,
				254,
				120,
				197,
				16,
				179,
				201,
				13,
				253,
				243,
				62,
				226,
				169,
				71,
				30,
				249,
				51,
				139,
				183,
				115,
				160,
				146,
				180,
				233,
				241,
				192,
				206,
				240,
				124,
				113,
				33,
				28,
				248,
				154,
				233,
				50,
				51,
				24,
				3,
				167,
				31,
				4,
				6,
				211,
				135,
				83,
				13,
				47,
				116,
				172,
				72,
				7,
				21,
				213,
				226,
				200,
				232,
				224,
				238,
				42,
				122,
				132,
				15,
				237,
				29,
				192,
				51,
				11,
				102,
				110,
				65,
				243,
				233,
				101,
				29,
				157,
				176,
				247,
				128,
				160,
				12,
				130,
				192,
				210,
				142,
				98,
				112,
				47,
				67,
				63,
				8,
				107,
				42,
				79,
				158,
				0,
				151,
				101,
				76,
				171,
				70,
				79,
				116,
				76,
				160,
				89,
				210,
				34,
				67,
				103,
				5,
				85,
				59,
				79,
				234,
				185,
				19,
				106,
				155,
				12,
				171,
				242,
				151,
				71,
				123,
				161,
				100,
				224,
				108,
				144,
				211,
				10,
				187,
				101,
				208,
				205,
				87,
				244,
				42,
				222,
				226,
				136,
				108,
				13,
				6,
				247,
				26,
				220,
				21,
				134,
				15,
				179,
				50,
				115,
				194,
				217,
				160,
				69,
				87,
				81,
				91,
				137,
				204,
				154,
				188,
				211,
				82,
				82,
				144,
				217,
				64,
				213,
				47,
				70,
				142,
				81,
				40,
				95,
				112,
				82,
				136,
				124,
				40,
				242,
				94,
				220,
				123,
				82,
				140,
				122,
				78,
				131,
				69,
				65,
				113,
				39,
				26,
				51,
				128,
				168,
				176,
				204,
				214,
				111,
				40,
				231,
				152,
				90,
				250,
				142,
				193,
				169,
				224,
				44,
				99,
				153,
				224,
				172,
				190,
				151,
				191,
				84,
				78,
				109,
				38,
				7,
				23,
				249,
				189,
				30,
				16,
				202,
				56,
				127,
				240,
				61,
				192,
				20,
				183,
				42,
				117,
				123,
				179,
				155,
				184,
				226,
				17,
				241,
				238,
				198,
				50,
				162,
				184,
				86,
				112,
				54,
				168,
				252,
				157,
				131,
				99,
				200,
				38,
				177,
				220,
				200,
				119,
				142,
				46,
				217,
				102,
				67,
				58,
				102,
				80,
				231,
				249,
				130,
				201,
				43,
				121,
				181,
				237,
				115,
				77,
				179,
				220,
				142,
				22,
				93,
				124,
				39,
				210,
				188,
				209,
				29,
				128,
				135,
				73,
				99,
				236,
				73,
				153,
				242,
				193,
				101,
				209,
				67,
				145,
				72,
				194,
				44,
				175,
				235,
				134,
				198,
				217,
				123,
				85,
				249,
				204,
				125,
				57,
				132,
				77,
				38,
				107,
				206,
				59,
				122,
				168,
				75,
				102,
				216,
				13,
				186,
				190,
				190,
				145,
				247,
				141,
				byte.MaxValue,
				79,
				243,
				251,
				180,
				6,
				byte.MaxValue,
				112,
				149,
				82,
				100,
				189,
				56,
				125,
				13,
				21,
				208,
				55,
				115,
				196,
				220,
				186,
				47,
				31,
				136,
				218,
				6,
				182,
				160,
				150,
				199,
				153,
				245,
				116,
				211,
				124,
				247,
				159,
				19,
				55,
				246,
				6,
				179,
				122,
				211,
				88,
				37,
				80,
				58,
				112,
				152,
				77,
				167,
				100,
				9,
				68,
				94,
				110,
				213,
				54,
				207,
				3,
				3,
				106,
				14,
				47,
				3,
				181,
				186,
				57,
				103,
				235,
				40,
				79,
				145,
				42,
				8,
				155,
				225,
				174,
				251,
				155,
				47,
				80,
				90,
				145,
				174,
				31,
				211,
				176,
				71,
				59,
				182,
				131,
				135,
				177,
				98,
				77,
				20,
				220,
				145,
				40,
				231,
				12,
				60,
				206,
				148,
				75,
				37,
				8,
				113,
				168,
				95,
				61,
				194,
				166,
				52,
				222,
				68,
				180,
				201,
				116,
				88,
				123,
				99,
				78,
				23,
				36,
				61,
				225,
				31,
				13,
				42,
				116,
				111,
				byte.MaxValue,
				139,
				253,
				221,
				253,
				58,
				201,
				222,
				239,
				172,
				24,
				175,
				18,
				77,
				129,
				231,
				39,
				103,
				71,
				108,
				210,
				32,
				138,
				61,
				146,
				155,
				93,
				115,
				125,
				139,
				2,
				25,
				48,
				145,
				122,
				8,
				193,
				130,
				183,
				218,
				83,
				99,
				205,
				199,
				163,
				9,
				9,
				53,
				233,
				216,
				107,
				48,
				237,
				241,
				173,
				87,
				47,
				246,
				64,
				165,
				30,
				185,
				7,
				204,
				118,
				125,
				130,
				91,
				1,
				30,
				237,
				165,
				17,
				155,
				140,
				2,
				205,
				208,
				250,
				119,
				153,
				187,
				41,
				55,
				103,
				149,
				40,
				209,
				192,
				85,
				223,
				46,
				72,
				214,
				0,
				38,
				199,
				24,
				126,
				84,
				12,
				19,
				198,
				223,
				225,
				5,
				106,
				96,
				140,
				85,
				125,
				73,
				59,
				235,
				210,
				118,
				251,
				165,
				225,
				187,
				155,
				208,
				14,
				110,
				111,
				245,
				188,
				183,
				216,
				69,
				138,
				146,
				216,
				209,
				45,
				98,
				254,
				131,
				163,
				37,
				84,
				82,
				87,
				100,
				104,
				81,
				233,
				110,
				228,
				218,
				34,
				251,
				77,
				108,
				53,
				166,
				233,
				178,
				238,
				244,
				193,
				65,
				201,
				172,
				17,
				120,
				62,
				0,
				243,
				192,
				115,
				22,
				54,
				5,
				195,
				11,
				174,
				166,
				218,
				112,
				164,
				225,
				142,
				62,
				159,
				3,
				155,
				30,
				40,
				170,
				185,
				165,
				94,
				42,
				233,
				70,
				55,
				214,
				60,
				207,
				33,
				172,
				20,
				182,
				61,
				169,
				249,
				186,
				138,
				23,
				25,
				77,
				204,
				252,
				239,
				217,
				48,
				105,
				100,
				207,
				236,
				185,
				36,
				11,
				6,
				236,
				190,
				48,
				154,
				151,
				64,
				8,
				177,
				38,
				172,
				191,
				252,
				236,
				230,
				181,
				82,
				123,
				183,
				4,
				205,
				72,
				219,
				63,
				112,
				172,
				81,
				76,
				115,
				126,
				205,
				124,
				35,
				101,
				149,
				183,
				122,
				245,
				127,
				67,
				154,
				93,
				207,
				102,
				22,
				20,
				252,
				85,
				221,
				126,
				45,
				8,
				236,
				226,
				2,
				41,
				142,
				141,
				159,
				160,
				221,
				9,
				129,
				4,
				148,
				169,
				250,
				155,
				44,
				126,
				77,
				178,
				49,
				79,
				121,
				48,
				110,
				63,
				105,
				178,
				43,
				22,
				222,
				246,
				94,
				134,
				3,
				193,
				133,
				250,
				205,
				61,
				181,
				70,
				103,
				220,
				104,
				105,
				229,
				235,
				198,
				113,
				109,
				74,
				124,
				4,
				130,
				183,
				161,
				179,
				90,
				105,
				197,
				230,
				114,
				207,
				178,
				8,
				47,
				228,
				22,
				205,
				230,
				80,
				106,
				198,
				246,
				250,
				161,
				234,
				10,
				209,
				11,
				151,
				111,
				124,
				187,
				50,
				133,
				96,
				35,
				253,
				135,
				245,
				38,
				132,
				164,
				144,
				230,
				230,
				180,
				165,
				22,
				146,
				134,
				190,
				153,
				26,
				22,
				174,
				38,
				228,
				112,
				191,
				72,
				204,
				38,
				235,
				191,
				55,
				248,
				151,
				245,
				224,
				182,
				37,
				143,
				112,
				56,
				59,
				57,
				34,
				188,
				177,
				226,
				46,
				110,
				209,
				251,
				40,
				78,
				68,
				14,
				115,
				194,
				222,
				251,
				198,
				192,
				217,
				136,
				15,
				116,
				167,
				212,
				171,
				197,
				251,
				158,
				237,
				51,
				83,
				102,
				50,
				196,
				245,
				209,
				20,
				byte.MaxValue,
				132,
				101,
				219,
				89,
				190,
				236,
				65,
				69,
				245,
				23,
				110,
				165,
				237,
				33,
				133,
				247,
				139,
				130,
				219,
				167,
				49,
				95,
				96,
				78,
				244,
				194,
				100,
				132,
				88,
				157,
				63,
				108,
				223,
				132,
				171,
				5,
				17,
				142,
				228,
				192,
				217,
				166,
				90,
				147,
				21,
				39,
				117,
				149,
				53,
				201,
				155,
				44,
				20,
				247,
				23,
				191,
				175,
				19,
				13,
				82,
				198,
				15,
				225,
				231,
				99,
				242,
				78,
				180,
				44,
				57,
				143,
				106,
				52,
				39,
				142,
				7,
				169,
				25,
				216,
				38,
				74,
				210,
				237,
				51,
				173,
				138,
				253,
				251,
				42,
				228,
				250,
				241,
				7,
				196,
				220,
				87,
				111,
				165,
				49,
				146,
				196,
				38,
				16,
				70,
				96,
				4,
				116,
				81,
				224,
				246,
				193,
				13,
				128,
				119,
				43,
				108,
				102,
				63,
				209,
				225,
				198,
				byte.MaxValue,
				126,
				54,
				192,
				24,
				71,
				241,
				250,
				146,
				76,
				11,
				33,
				103,
				172,
				194,
				132,
				98,
				179,
				34,
				249,
				152,
				72,
				243,
				33,
				158,
				69,
				221,
				0,
				177,
				240,
				136,
				244,
				237,
				101,
				147,
				43,
				224,
				188,
				188,
				237,
				128,
				7,
				62,
				123,
				169,
				167,
				117,
				195,
				72,
				106,
				72,
				0,
				173,
				56,
				26,
				115,
				101,
				167,
				64,
				43,
				176,
				24,
				55,
				165,
				156,
				117,
				133,
				33,
				230,
				14,
				58,
				44,
				byte.MaxValue,
				57,
				74,
				93,
				214,
				16,
				129,
				105,
				44,
				124,
				96,
				37,
				1,
				44,
				10,
				178,
				254,
				114,
				175,
				2,
				12,
				37,
				204,
				96,
				38,
				54,
				138,
				106,
				50,
				63,
				78,
				253,
				220,
				108,
				181,
				19,
				93,
				149,
				113,
				96,
				115,
				93,
				34,
				58,
				1,
				90,
				36,
				132,
				37,
				121,
				179,
				170,
				169,
				67,
				206,
				146,
				37,
				202,
				55,
				100,
				247,
				139,
				29,
				90,
				140,
				127,
				11,
				35,
				120,
				22,
				106,
				136,
				76,
				221,
				155,
				94,
				167,
				220,
				191,
				73,
				5,
				213,
				61,
				82,
				172,
				69,
				52,
				20,
				131,
				87,
				57,
				65,
				141,
				33,
				188,
				223,
				239,
				93,
				140,
				199,
				194,
				253,
				190,
				67,
				249,
				92,
				179,
				89,
				170,
				101,
				236,
				237,
				22,
				128,
				110,
				244,
				54,
				60,
				132,
				234,
				21,
				222,
				232,
				72,
				28,
				7,
				187,
				45,
				55,
				203,
				34,
				153,
				125,
				53,
				125,
				237,
				167,
				235,
				85,
				113,
				86,
				75,
				55,
				192,
				72,
				237,
				208,
				66,
				187,
				20,
				55,
				58,
				116,
				195,
				134,
				237,
				81,
				243,
				243,
				100,
				225,
				8,
				177,
				65,
				185,
				35,
				165,
				26,
				126,
				202,
				47,
				251,
				159,
				134,
				99,
				71,
				85,
				76,
				53,
				131,
				98,
				225,
				177,
				253,
				186,
				190,
				106,
				151,
				174,
				70,
				4,
				110,
				216,
				199,
				130,
				193,
				142,
				86,
				217,
				247,
				220,
				7,
				217,
				204,
				56,
				21,
				167,
				189,
				84,
				28,
				211,
				148,
				176,
				216,
				53,
				209,
				122,
				48,
				34,
				169,
				66,
				187,
				29,
				77,
				49,
				84,
				252,
				133,
				84,
				4,
				15,
				110,
				190,
				196,
				215,
				188,
				byte.MaxValue,
				36,
				196,
				205,
				96,
				96,
				145,
				224,
				91,
				137,
				48,
				242,
				10,
				212,
				174,
				188,
				175,
				190,
				231,
				194,
				226,
				118,
				185,
				138,
				78,
				175,
				8,
				26,
				100,
				67,
				99,
				6,
				221,
				42,
				106,
				254,
				208,
				205,
				25,
				176,
				99,
				48,
				221,
				63,
				252,
				85,
				101,
				87,
				68,
				76,
				199,
				26,
				89,
				29,
				64,
				121,
				254,
				146,
				246,
				57,
				173,
				128,
				45,
				11,
				87,
				34,
				50,
				140,
				150,
				62,
				111,
				180,
				216,
				242,
				63,
				1,
				186,
				52,
				133,
				151,
				155,
				140,
				103,
				59,
				145,
				185,
				57,
				110,
				136,
				5,
				237,
				231,
				146,
				44,
				127,
				144,
				180,
				172,
				50,
				20,
				11,
				166,
				14,
				106,
				9,
				172,
				112,
				252,
				89,
				43,
				44,
				104,
				37,
				248,
				44,
				159,
				47,
				29,
				244,
				90,
				121,
				115,
				141,
				127,
				203,
				115,
				243,
				104,
				63,
				123,
				107,
				193,
				132,
				156,
				179,
				177,
				130,
				87,
				4,
				111,
				202,
				157,
				2,
				182,
				186,
				252,
				202,
				184,
				70,
				54,
				114,
				148,
				134,
				186,
				117,
				244,
				12,
				0,
				36,
				101,
				246,
				145,
				115,
				35,
				15,
				146,
				84,
				5,
				52,
				146,
				225,
				244,
				229,
				183,
				183,
				49,
				38,
				1,
				246,
				178,
				45,
				164,
				126,
				86,
				30,
				54,
				136,
				231,
				193,
				74,
				241,
				112,
				229,
				112,
				117,
				18,
				220,
				201,
				155,
				216,
				31,
				118,
				245,
				54,
				205,
				112,
				136,
				150,
				207,
				75,
				214,
				57,
				79,
				117,
				142,
				95,
				7,
				89,
				213,
				54,
				109,
				216,
				218,
				45,
				11,
				101,
				35,
				49,
				161,
				248,
				216,
				231,
				194,
				15,
				114,
				91,
				141,
				83,
				212,
				97,
				91,
				229,
				245,
				156,
				54,
				199,
				15,
				190,
				246,
				54,
				187,
				206,
				182,
				203,
				247,
				103,
				180,
				142,
				49,
				136,
				144,
				141,
				202,
				164,
				114,
				13,
				58,
				120,
				38,
				126,
				191,
				176,
				223,
				199,
				217,
				37,
				196,
				246,
				112,
				156,
				217,
				9,
				152,
				52,
				92,
				18,
				150,
				105,
				237,
				128,
				236,
				70,
				0,
				84,
				103,
				182,
				231,
				12,
				150,
				94,
				21,
				50,
				93,
				68,
				115,
				158,
				237,
				133,
				77,
				112,
				81,
				37,
				158,
				207,
				43,
				210,
				194,
				215,
				123,
				108,
				69,
				29,
				byte.MaxValue,
				125,
				89,
				94,
				63,
				39,
				21,
				215,
				225,
				3,
				160,
				217,
				48,
				241,
				137,
				141,
				228,
				57,
				218,
				223,
				230,
				128,
				189,
				123,
				86,
				209,
				76,
				26,
				199,
				6,
				201,
				233,
				153,
				34,
				211,
				135,
				179,
				117,
				181,
				196,
				78,
				139,
				2,
				124,
				29,
				37,
				140,
				174,
				238,
				81,
				159,
				30,
				173,
				112,
				154,
				3,
				139,
				185,
				4,
				172,
				195,
				26,
				90,
				186,
				60,
				206,
				191,
				76,
				160,
				210,
				84,
				107,
				45,
				33,
				191,
				108,
				74,
				121,
				221,
				83,
				240,
				174,
				145,
				91,
				75,
				162,
				92,
				206,
				237,
				49,
				131,
				20,
				137,
				130,
				164,
				252,
				23,
				232,
				245,
				96,
				47,
				145,
				36,
				149,
				213,
				182,
				7,
				107,
				83,
				33,
				75,
				57,
				72,
				234,
				199,
				81,
				143,
				205,
				35,
				119,
				31,
				193,
				254,
				70,
				223,
				37,
				160,
				242,
				139,
				250,
				76,
				191,
				123,
				147,
				234,
				163,
				11,
				168,
				32,
				112,
				109,
				165,
				5,
				131,
				127,
				100,
				186,
				213,
				9,
				181,
				71,
				76,
				146,
				181,
				213,
				17,
				82,
				60,
				195,
				45,
				92,
				127,
				147,
				240,
				168,
				48,
				247,
				14,
				26,
				221,
				206,
				14,
				79,
				85,
				231,
				151,
				112,
				201,
				234,
				207,
				106,
				226,
				239,
				146,
				119,
				107,
				113,
				198,
				242,
				223,
				64,
				85,
				63,
				70,
				40,
				22,
				200,
				145,
				197,
				223,
				176,
				92,
				244,
				154,
				18,
				22,
				51,
				32,
				69,
				89,
				141,
				237,
				230,
				44,
				251,
				32,
				244,
				244,
				161,
				89,
				48,
				69,
				230,
				51,
				166,
				225,
				119,
				192,
				73,
				203,
				11,
				76,
				192,
				6,
				188,
				8,
				47,
				84,
				213,
				128,
				123,
				166,
				44,
				162,
				239,
				170,
				195,
				190,
				72,
				66,
				221,
				203,
				75,
				230,
				byte.MaxValue,
				128,
				102,
				48,
				47,
				146,
				117,
				143,
				115,
				15,
				54,
				178,
				33,
				209,
				232,
				150,
				230,
				252,
				159,
				83,
				165,
				98,
				48,
				85,
				118,
				173,
				246,
				80,
				132,
				66,
				19,
				217,
				56,
				130,
				180,
				29,
				178,
				199,
				251,
				43,
				180,
				173,
				213,
				8,
				161,
				166,
				17,
				150,
				77,
				20,
				84,
				199,
				38,
				59,
				7,
				104,
				21,
				232,
				226,
				40,
				75,
				160,
				25,
				182,
				132,
				50,
				183,
				52,
				155,
				135,
				76,
				144,
				155,
				55,
				237,
				163,
				50,
				140,
				96,
				242,
				65,
				83,
				8,
				14,
				64,
				67,
				234,
				173,
				123,
				85,
				205,
				140,
				77,
				41,
				216,
				51,
				26,
				105,
				150,
				93,
				90,
				224,
				1,
				135,
				146,
				28,
				201,
				152,
				176,
				8,
				226,
				240,
				209,
				103,
				40,
				238,
				236,
				17,
				250,
				219,
				164,
				36,
				192,
				82,
				66,
				125,
				32,
				193,
				100,
				140,
				158,
				152,
				100,
				191,
				62,
				200,
				212,
				181,
				7,
				157,
				93,
				156,
				137,
				216,
				247,
				54,
				56,
				158,
				178,
				93,
				214,
				55,
				43,
				7,
				29,
				26,
				15,
				228,
				22,
				146,
				245,
				109,
				27,
				173,
				156,
				87,
				16,
				153,
				230,
				245,
				163,
				101,
				102,
				228,
				237,
				71,
				205,
				110,
				190,
				57,
				124,
				53,
				223,
				125,
				52,
				128,
				15,
				220,
				220,
				67,
				14,
				12,
				28,
				33,
				72,
				43,
				22,
				8,
				139,
				218,
				86,
				15,
				53,
				246,
				116,
				222,
				138,
				196,
				39,
				198,
				100,
				92,
				227,
				66,
				211,
				0,
				70,
				149,
				74,
				38,
				143,
				44,
				22,
				20,
				246,
				byte.MaxValue,
				231,
				8,
				7,
				199,
				184,
				27,
				217,
				39,
				43,
				206,
				72,
				62,
				18,
				197,
				242,
				227,
				203,
				29,
				177,
				119,
				213,
				184,
				223,
				17,
				190,
				103,
				40,
				235,
				76,
				109,
				211,
				82,
				147,
				225,
				133,
				73,
				194,
				39,
				12,
				140,
				236,
				162,
				187,
				1,
				152,
				190,
				25,
				239,
				146,
				39,
				22,
				212,
				40,
				161,
				109,
				61,
				43,
				91,
				83,
				196,
				46,
				230,
				127,
				45,
				92,
				16,
				172,
				162,
				207,
				13,
				144,
				88,
				90,
				171,
				207,
				14,
				153,
				26,
				194,
				164,
				10,
				206,
				242,
				162,
				192,
				byte.MaxValue,
				150,
				53,
				142,
				171,
				79,
				128,
				107,
				93,
				61,
				27,
				19,
				253,
				208,
				153,
				110,
				62,
				150,
				155,
				95,
				148,
				204,
				70,
				241,
				110,
				146,
				27,
				169,
				104,
				219,
				24,
				171,
				41,
				40,
				45,
				214,
				102,
				77,
				49,
				83,
				54,
				14,
				29,
				106,
				144,
				182,
				12,
				50,
				241,
				30,
				189,
				44,
				191,
				39,
				242,
				5,
				83,
				75,
				211,
				77,
				247,
				229,
				239,
				222,
				221,
				229,
				86,
				155,
				29,
				87,
				94,
				3,
				234,
				109,
				244,
				68,
				101,
				116,
				138,
				194,
				137,
				203,
				160,
				144,
				128,
				125,
				163,
				70,
				232,
				118,
				107,
				74,
				125,
				101,
				80,
				144,
				26,
				235,
				131,
				225,
				241,
				194,
				150,
				152,
				137,
				69,
				155,
				187,
				249,
				168,
				24,
				201,
				176,
				239,
				254,
				164,
				36,
				210,
				168,
				131,
				227,
				127,
				247,
				170,
				122,
				114,
				189,
				144,
				193,
				25,
				26,
				221,
				35,
				167,
				212,
				141,
				169,
				174,
				199,
				77,
				244,
				98,
				45,
				25,
				38,
				48,
				222,
				191,
				178,
				132,
				109,
				150,
				8,
				149,
				25,
				135,
				216,
				72,
				239,
				171,
				147,
				37,
				167,
				60,
				166,
				15,
				88,
				135,
				104,
				53,
				195,
				202,
				252,
				233,
				54,
				75,
				0,
				246,
				144,
				209,
				119,
				123,
				221,
				39,
				22,
				149,
				90,
				21,
				80,
				4,
				242,
				190,
				179,
				18,
				181,
				103,
				108,
				239,
				213,
				48,
				116,
				73,
				130,
				109,
				80,
				227,
				176,
				149,
				27,
				249,
				246,
				133,
				73,
				40,
				154,
				52,
				80,
				236,
				18,
				94,
				112,
				39,
				224,
				12,
				172,
				107,
				149,
				182,
				127,
				126,
				133,
				178,
				21,
				176,
				47,
				148,
				152,
				215,
				250,
				63,
				114,
				8,
				72,
				216,
				217,
				241,
				12,
				153,
				83,
				35,
				230,
				139,
				93,
				85,
				81,
				79,
				88,
				233,
				164,
				148,
				37,
				216,
				35,
				236,
				25,
				67,
				166,
				203,
				179,
				185,
				143,
				91,
				154,
				126,
				131,
				182,
				158,
				135,
				85,
				248,
				60,
				125,
				239,
				254,
				193,
				21,
				204,
				202,
				67,
				44,
				136,
				204,
				164,
				110,
				213,
				71,
				96,
				86,
				137,
				150,
				102,
				249,
				55,
				161,
				101,
				205,
				91,
				230,
				146,
				236,
				41,
				3,
				244,
				63,
				236,
				38,
				237,
				42,
				30,
				189,
				125,
				108,
				206,
				64,
				20,
				137,
				219,
				30,
				236,
				148,
				102,
				225,
				146,
				200,
				85,
				159,
				241,
				41,
				12,
				211,
				60,
				16,
				254,
				193,
				196,
				48,
				83,
				16,
				96,
				125,
				144,
				16,
				125,
				163,
				25,
				70,
				250,
				181,
				30,
				72,
				136,
				248,
				32,
				173,
				49,
				162,
				78,
				72,
				64,
				108,
				105,
				3,
				245,
				239,
				214,
				146,
				122,
				149,
				184,
				93,
				63,
				202,
				106,
				174,
				104,
				42,
				100,
				0,
				87,
				80,
				136,
				74,
				77,
				229,
				0,
				174,
				63,
				161,
				246,
				209,
				144,
				88,
				2,
				110,
				92,
				157,
				205,
				53,
				175,
				217,
				127,
				103,
				203,
				59,
				119,
				229,
				169,
				28,
				253,
				19,
				237,
				175,
				232,
				169,
				107,
				116,
				227,
				227,
				26,
				121,
				187,
				219,
				235,
				231,
				198,
				194,
				195,
				132,
				166,
				251,
				226,
				100,
				180,
				129,
				243,
				249,
				127,
				127,
				47,
				93,
				165,
				235,
				171,
				205,
				143,
				90,
				59,
				172,
				36,
				240,
				109,
				112,
				18,
				174,
				130,
				168,
				9,
				138,
				170,
				53,
				66,
				170,
				122,
				248,
				204,
				14,
				106,
				71,
				83,
				90,
				248,
				179,
				49,
				65,
				15,
				217,
				113,
				92,
				228,
				218,
				159,
				190,
				132,
				197,
				24,
				92,
				144,
				142,
				129,
				69,
				221,
				254,
				87,
				175,
				201,
				167,
				42,
				74,
				221,
				77,
				120,
				251,
				82,
				77,
				140,
				215,
				253,
				203,
				180,
				251,
				216,
				120,
				28,
				188,
				192,
				217,
				72,
				97,
				69,
				70,
				14,
				78,
				112,
				197,
				225,
				252,
				74,
				133,
				52,
				142,
				90,
				2,
				135,
				12,
				157,
				231,
				163,
				149,
				181,
				241,
				3,
				64,
				152,
				88,
				64,
				244,
				32,
				21,
				29,
				14,
				212,
				174,
				232,
				72,
				215,
				171,
				236,
				19,
				146,
				75,
				91,
				17,
				88,
				125,
				130,
				19,
				89,
				76,
				250,
				39,
				155,
				10,
				82,
				191,
				159,
				17,
				95,
				137,
				13,
				232,
				2,
				237,
				183,
				4,
				129,
				126,
				205,
				142,
				201,
				1,
				240,
				83,
				72,
				121,
				93,
				64,
				25,
				164,
				33,
				28,
				92,
				189,
				124,
				46,
				184,
				15,
				230,
				71,
				39,
				235,
				10,
				86,
				233,
				206,
				145,
				65,
				220,
				35,
				118,
				228,
				177,
				128,
				59,
				23,
				109,
				188,
				25,
				171,
				235,
				251,
				66,
				165,
				188,
				35,
				221,
				47,
				7,
				118,
				110,
				243,
				209,
				121,
				208,
				134,
				160,
				129,
				252,
				174,
				49,
				5,
				172,
				193,
				57,
				239,
				34,
				164,
				114,
				101,
				231,
				5,
				48,
				106,
				13,
				140,
				250,
				156,
				168,
				214,
				104,
				5,
				229,
				56,
				180,
				130,
				130,
				22,
				10,
				195,
				156,
				250,
				156,
				208,
				35,
				95,
				37,
				204,
				248,
				65,
				79,
				132,
				100,
				167,
				127,
				92,
				119,
				232,
				251,
				210,
				16,
				75,
				175,
				190,
				7,
				186,
				126,
				150,
				15,
				175,
				253,
				237,
				82,
				189,
				60,
				91,
				72,
				123,
				11,
				20,
				5,
				153,
				85,
				246,
				75,
				6,
				100,
				131,
				45,
				133,
				166,
				157,
				218,
				81,
				109,
				229,
				119,
				226,
				189,
				216,
				150,
				210,
				35,
				76,
				215,
				132,
				120,
				227,
				44,
				154,
				177,
				49,
				97,
				69,
				52,
				237,
				21,
				63,
				15,
				107,
				152,
				208,
				130,
				161,
				192,
				88,
				177,
				33,
				15,
				197,
				59,
				84,
				138,
				207,
				214,
				9,
				223,
				122,
				4,
				100,
				27,
				125,
				242,
				194,
				203,
				109,
				218,
				189,
				60,
				121,
				34,
				242,
				byte.MaxValue,
				130,
				233,
				53,
				97,
				9,
				49,
				33,
				148,
				169,
				235,
				87,
				207,
				20,
				83,
				109,
				139,
				18,
				219,
				146,
				186,
				133,
				235,
				119,
				46,
				112,
				37,
				110,
				222,
				56,
				106,
				114,
				254,
				249,
				28,
				70,
				116,
				229,
				77,
				0,
				116,
				159,
				178,
				byte.MaxValue,
				25,
				150,
				208,
				69,
				77,
				28,
				18,
				78,
				131,
				123,
				143,
				168,
				50,
				39,
				51,
				7,
				47,
				91,
				225,
				252,
				16,
				247,
				212,
				10,
				4,
				56,
				60,
				154,
				210,
				192,
				8,
				211,
				219,
				57,
				12,
				141,
				66,
				5,
				194,
				54,
				153,
				246,
				37,
				14,
				225,
				114,
				139,
				188,
				142,
				108,
				22,
				163,
				149,
				23,
				198,
				84,
				115,
				188,
				134,
				237,
				140,
				15,
				182,
				75,
				94,
				18,
				112,
				227,
				150,
				69,
				251,
				144,
				131,
				157,
				234,
				246,
				208,
				252,
				126,
				202,
				161,
				57,
				172,
				132,
				42,
				81,
				148,
				93,
				205,
				154,
				145,
				3,
				194,
				237,
				195,
				160,
				17,
				253,
				194,
				207,
				26,
				19,
				10,
				145,
				217,
				123,
				47,
				13,
				202,
				165,
				164,
				84,
				199,
				177,
				39,
				221,
				80,
				174,
				67,
				89,
				184,
				153,
				179,
				219,
				47,
				193,
				241,
				193,
				169,
				110,
				37,
				34,
				139,
				106,
				253,
				195,
				127,
				169,
				38,
				49,
				63,
				229,
				54,
				161,
				120,
				176,
				57,
				246,
				14,
				151,
				155,
				85,
				49,
				151,
				75,
				242,
				146,
				174,
				140,
				158,
				139,
				222,
				237,
				215,
				43,
				27,
				0,
				213,
				131,
				12,
				185,
				86,
				253,
				148,
				239,
				28,
				124,
				10,
				20,
				171,
				105,
				101,
				202,
				11,
				153,
				113,
				241,
				84,
				174,
				171,
				121,
				188,
				71,
				155,
				53,
				36,
				200,
				43,
				175,
				123,
				210,
				8,
				108,
				226,
				40,
				19,
				55,
				134,
				112,
				188,
				80,
				92,
				82,
				8,
				101,
				44,
				205,
				32,
				34,
				238,
				242,
				188,
				136,
				167,
				78,
				254,
				178,
				200,
				194,
				216,
				92,
				50,
				17,
				44,
				207,
				66,
				233,
				206,
				27,
				175,
				191,
				207,
				225,
				250,
				142,
				159,
				65,
				196,
				160,
				132,
				58,
				173,
				134,
				227,
				162,
				62,
				220,
				118,
				198,
				79,
				14,
				93,
				102,
				169,
				65,
				42,
				95,
				245,
				199,
				251,
				171,
				4,
				111,
				181,
				40,
				123,
				148,
				19,
				168,
				190,
				78,
				100,
				251,
				166,
				239,
				82,
				113,
				149,
				16,
				86,
				162,
				136,
				135,
				65,
				72,
				133,
				236,
				204,
				112,
				173,
				78,
				234,
				64,
				160,
				197,
				136,
				45,
				231,
				53,
				81,
				198,
				229,
				217,
				198,
				137,
				200,
				67,
				112,
				240,
				115,
				150,
				135,
				95,
				151,
				229,
				141,
				103,
				208,
				62,
				146,
				228,
				192,
				241,
				105,
				142,
				139,
				32,
				184,
				173,
				125,
				15,
				31,
				32,
				35,
				29,
				179,
				134,
				204,
				36,
				85,
				136,
				80,
				171,
				28,
				132,
				194,
				232,
				121,
				94,
				52,
				222,
				90,
				184,
				72,
				193,
				187,
				11,
				182,
				164,
				249,
				232,
				138,
				117,
				55,
				16,
				21,
				24,
				38,
				121,
				222,
				217,
				40,
				28,
				176,
				176,
				61,
				91,
				41,
				141,
				221,
				55,
				6,
				10,
				220,
				166,
				207,
				42,
				70,
				212,
				60,
				132,
				144,
				103,
				115,
				15,
				226,
				149,
				72,
				170,
				102,
				64,
				205,
				95,
				119,
				byte.MaxValue,
				24,
				245,
				21,
				179,
				48,
				18,
				169,
				155,
				50,
				63,
				171,
				160,
				57,
				30,
				211,
				158,
				151,
				148,
				7,
				91,
				113,
				94,
				160,
				21,
				167,
				126,
				170,
				200,
				22,
				42,
				114,
				53,
				173,
				144,
				232,
				210,
				220,
				54,
				51,
				98,
				44,
				107,
				132,
				149,
				44,
				118,
				130,
				177,
				13,
				64,
				66,
				61,
				233,
				147,
				183,
				65,
				174,
				74,
				187,
				135,
				240,
				75,
				94,
				245,
				204,
				164,
				205,
				147,
				55,
				239,
				216,
				96,
				160,
				184,
				83,
				150,
				104,
				234,
				183,
				145,
				55,
				210,
				227,
				219,
				47,
				96,
				72,
				142,
				81,
				228,
				235,
				24,
				159,
				70,
				46,
				195,
				132,
				247,
				254,
				215,
				216,
				190,
				126,
				95,
				112,
				27,
				226,
				95,
				131,
				117,
				122,
				224,
				140,
				130,
				60,
				99,
				176,
				234,
				49,
				234,
				35,
				182,
				225,
				4,
				12,
				20,
				93,
				130,
				181,
				172,
				219,
				122,
				196,
				84,
				225,
				7,
				29,
				184,
				23,
				208,
				195,
				77,
				100,
				197,
				254,
				12,
				69,
				183,
				181,
				141,
				41,
				156,
				77,
				98,
				215,
				12,
				76,
				189,
				40,
				118,
				230,
				81,
				70,
				7,
				252,
				192,
				185,
				10,
				115,
				byte.MaxValue,
				241,
				221,
				244,
				62,
				177,
				185,
				0,
				125,
				101,
				224,
				228,
				107,
				183,
				93,
				byte.MaxValue,
				97,
				154,
				171,
				190,
				176,
				77,
				17,
				33,
				140,
				byte.MaxValue,
				205,
				93,
				222,
				139
			};
		}
	}
}
